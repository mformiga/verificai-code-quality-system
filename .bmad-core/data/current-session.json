{
  "session_info": {
    "date": "2025-09-16",
    "time": "22:45:00",
    "timezone": "America/Sao_Paulo",
    "working_directory": "C:\\Users\\formi\\teste_gemini\\dev\\verificAI-code"
  },
  "services": {
    "backend": {
      "status": "running",
      "port": 8000,
      "url": "http://localhost:8000",
      "command": "cd backend && python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000",
      "process_id": "deddd0",
      "database": {
        "type": "SQLite",
        "file": "backend/verificai.db",
        "auto_created": true
      },
      "api_endpoints": {
        "base": "/api/v1/",
        "docs": "/api/v1/docs",
        "health": "/health",
        "ready": "/ready"
      }
    },
    "frontend": {
      "status": "running",
      "port": 3023,
      "url": "http://localhost:3023",
      "command": "cd frontend && npm run dev",
      "process_id": "eead44",
      "build_tool": "Vite",
      "framework": "React",
      "features": {
        "hot_reload": true,
        "proxy_config": true,
        "dynamic_port": true
      }
    }
  },
  "application": {
    "name": "VerificAI Code Quality System",
    "version": "1.0.0",
    "description": "Sistema de análise de código baseado em IA para equipes de QA",
    "status": "fully_operational",
    "access_urls": {
      "frontend": "http://localhost:3023",
      "backend_api": "http://localhost:8000/api/v1/",
      "api_docs": "http://localhost:8000/api/v1/docs",
      "login_page": "http://localhost:3023/login"
    }
  },
  "key_fixes_applied": [
    {
      "issue": "FileUpload component import errors",
      "solution": "Created self-contained FileUpload component with inline types",
      "files_modified": [
        "frontend/src/components/features/CodeUpload/FileUpload.tsx",
        "frontend/src/hooks/useFileUpload.ts"
      ]
    },
    {
      "issue": "useFileUpload hook dependency problems",
      "solution": "Simplified hook to avoid complex service dependencies",
      "files_modified": ["frontend/src/hooks/useFileUpload.ts"]
    },
    {
      "issue": "Type import errors",
      "solution": "Defined types inline in FileUpload component",
      "files_modified": ["frontend/src/components/features/CodeUpload/FileUpload.tsx"]
    }
  ],
  "environment_setup": {
    "package_json_scripts": {
      "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
      "dev:backend": "cd backend && python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000",
      "dev:frontend": "cd frontend && npm run dev",
      "dev:quick": "npm run install:all && npm run dev",
      "setup": "npm run install:all && echo \"Environment setup complete! Use 'npm run dev' to start.\"",
      "status": "echo \"Backend: http://localhost:8000\" && echo \"Frontend: Check console for port (starts at 3011)\" && echo \"API Docs: http://localhost:8000/api/v1/docs\"",
      "install:all": "npm install && cd frontend && npm install && cd ../backend && pip install -r requirements.txt",
      "reset:db": "cd backend && rm -f verificai.db"
    },
    "quick_start_commands": [
      "npm run setup",
      "npm run dev",
      "npm run status"
    ],
    "documentation_files": [
      ".bmad-core/tasks/setup-environment.md",
      "QUICKSTART.md"
    ]
  },
  "next_session_instructions": {
    "step_1": "Execute: npm run setup (para instalar dependências)",
    "step_2": "Execute: npm run dev (para iniciar os serviços)",
    "step_3": "Acesse: http://localhost:{frontend_port} (verificar porta no console)",
    "step_4": "Login disponível em: /login",
    "alternative": "Execute npm run dev:quick para setup + início automático"
  },
  "troubleshooting": {
    "common_issues": [
      {
        "problem": "Port conflicts",
        "solution": "Frontend auto-detects available ports, backend uses fixed 8000"
      },
      {
        "problem": "Import errors",
        "solution": "FileUpload component is now self-contained with inline types"
      },
      {
        "problem": "Database issues",
        "solution": "Run 'npm run reset:db' to recreate SQLite database"
      }
    ],
    "reset_commands": {
      "frontend": "npm run reset:frontend",
      "backend": "npm run reset:backend",
      "database": "npm run reset:db"
    }
  }
}